// Finding the max sum of elements of an array k considered at a time

int window(int a[],int n,int k){
    int res=0,temp=0;
    for(int i=0;i<k;i++){
        temp+=a[i];
        
    }
    for(int j=0;j<n-k;j++){
        temp+=a[k+j]-a[j];
        res=max(res,temp);
    }
    return res;
}

===========================================================================================================================================
===========================================================================================================================================

/* Prints the sub array if the there is a subarray of arr[] with a sum equal to 'sum' 
otherwise returns false. */
int subArraySum(int arr[], int n, int sum) 
{ 
	/* Initialize curr_sum as value of first element 
	and starting point as 0 */
	int curr_sum = arr[0], start = 0, i; 

	/* Add elements one by one to curr_sum and if the curr_sum exceeds the 
	sum, then remove starting element */
	for (i = 1; i <= n; i++) 
	{ 
		// If curr_sum exceeds the sum, then remove the starting elements 
		while (curr_sum > sum && start < i-1) 
		{ 
			curr_sum = curr_sum - arr[start]; 
			start++; 
		} 

		// If curr_sum becomes equal to sum, then return true 
		if (curr_sum == sum) 
		{ 
			printf ("Sum found between indexes %d and %d", start, i-1); 
			return 1; 
		} 

		// Add this element to curr_sum 
		if (i < n) 
		curr_sum = curr_sum + arr[i]; 
	} 

	// If we reach here, then no subarray 
	printf("No subarray found"); 
	return 0; 
} 
